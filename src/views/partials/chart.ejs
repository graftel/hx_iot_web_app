
<h2 class="chart-heading">Heat Balance Error</h2>
<div class="row" id="dashboard-line-chart-div">
<!--	<svg id="visualisation" width="1000" height="500"
		class="col col-md-10"></svg> -->
</div>
<!-- <div class="row">
	<table class="table col col-md-9 col-md-offset-3" id="legend"></table>
</div> -->

<style>
/* div.tooltip {
	position: absolute;
	text-align: center;
	width: 130px;
	height: 32px;
	padding: 2px;
	font: 12px sans-serif;
	background: lightsteelblue;
	border: 0px;
	border-radius: 8px;
	pointer-events: none;
}
 */
.xaxis text, .yaxis text {
	color: black;
	font-size: 150%;
}

path.line {
	width: 600px;
	height: 351px;
	overflow: hidden;
}

.sideLegend text {
	font-weight: bold;
	font-size: 15px;
	cursor: pointer;
}

/* #legend {
	font-weight: bold;
	font-size: 20px;
	font-style: oblique;
	cursor: pointer;
	width: 40%;
}

#legend td {
	text-align: center;
}

#legend td:hover {
	background-color: #f5f5f5;
}
 */
.disable {
	pointer-events: none;
	background-color: #e6e6e6;
}
</style>

<script>

	var data = <%- JSON.stringify(data) %>;
	var assets = <%- JSON.stringify(assets) %>;

	 drawLineChart(data, assets);
	//mouse over event - end

	// update live graph
	function updateGraph(data) {
		data = JSON.parse(data);
		setMinMaxforAxis(data);
		res = reformatData(data);
		res.forEach(function(d) {
			dataGroup.unshift(d);
		});

		vis.select(".xaxis").remove();
		vis.select(".yaxis").remove();
		chartBody.selectAll(".line").remove();
		xScale.domain([ minX, maxX ]);
		yScale.domain([ 0, maxY * 1.2 ]);

		xAxis = d3.axisBottom(xScale).ticks(10).tickFormat(function(d) {
			return timestampToTime(d);
		});
		yAxis = d3.axisLeft(yScale);

		gY = vis.append("g").attr("class", "yaxis").attr("transform",
				"translate(" + (MARGINS.left) + ",0)").call(yAxis);
		gX = vis.append("g").attr("transform",
				"translate(0," + (HEIGHT - MARGINS.bottom) + ")").attr("class",
				"xaxis");

		vis.append("g")
	   		.attr("class", "yaxis")
				.append("text")
				.attr("transform", "rotate(-90)")
				.attr("y", 6)
				.attr("dy", ".71em")
				.style("text-anchor", "end")
				.style("font-size", "10pt")
				.text("Heat Balance Error (%)");

		gX.call(xAxis).selectAll("text").attr("y", 0).attr("x", 9).attr("dy",
				".35em").attr("transform", "rotate(90)").style("text-anchor",
				"start");

		dataGroup.forEach(function(d, i) {
			chartBody.select("#" + d.key).remove();
			chartBody.append('path').attr('d', lineGen(d.values)).attr(
					'stroke', colors[d.key]).attr('stroke-width', 2).attr(
					'class', 'line').attr('fill', 'none').attr('id', d.key);
			//  .on("mouseover", handleMouseOver).on("mouseout", handleMouseOut);
			setStrokeVisibility(d.key);
			setLegendEnability(d.key, d.values.length);
		});
	}

	// helper functions
	function zoomFunction() {
		var new_xScale = d3.event.transform.rescaleX(xScale);
		var new_yScale = d3.event.transform.rescaleY(yScale);
		gX.call(xAxis.scale(new_xScale)).selectAll("text").attr("y", 0).attr(
				"x", 9).attr("dy", ".35em").attr("transform", "rotate(90)")
				.style("text-anchor", "start");
		gY.call(yAxis.scale(new_yScale));
		vis.selectAll('.line').attr("transform", d3.event.transform);
	}

	/*	function handleMouseOver() {
	 var xValue = timestampToTime(Math.round(xScale.invert(d3.mouse(this)[0])));
	 var yValue = yScale.invert(d3.mouse(this)[1]).toFixed(2);
	 tip.transition()
	 .duration(200)
	 .style("opacity", .9);

	 tip.html(xValue + "<br/>"  + yValue)
	 .style("left", (d3.event.pageX) + "px")
	 .style("top", (d3.event.pageY - 28) + "px");
	 }

	 function handleMouseOut(){
	 tip.transition()
	 .duration(200)
	 .style("opacity", 0)
	 .style("pointer-events", 'none');
	 }*/


</script>
