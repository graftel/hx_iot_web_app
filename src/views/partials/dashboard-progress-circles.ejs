<!--> <% for(var i = 0; i < JSON.stringify(instData.Items).length; i++) { %>
	<h2 class="chart-heading"><%= instData.Items[i].DisplayName %></h2>
	<div class="row">
			<% for(var j = 0; j < Object.keys(JSON.stringify(instData.Parameters)).length; j++ )  { %>
					<div id="progress-circle" class="col-md-2"></div>
			<% } %>
	</div>
<% } %><!-->

<h2 class="chart-heading">Instant Data</h2>
<div class="row">
	<div id="progress-circle" class="col-md-2"></div>
	<div id="progress-circle" class="col-md-2"></div>
	<div id="progress-circle" class="col-md-2"></div>
	<div id="progress-circle" class="col-md-2"></div>
</div>

<style>
.progress-meter text {
	font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
	font-size: 24px;
	font-weight: bold;
}
</style>

<script>
	var radius = 50;
	var border = 5;
	var padding = 20;
	var startPercent = 0;
	var endPercent = 0.65;

	var circleColor = setProgressColor();
	var twoPi = Math.PI * 2;
	var formatPercent = d3.format('.0%');
	var boxSize = (radius + padding) * 2;
	var count = Math.abs((endPercent - startPercent) / 0.01);
	var step = endPercent < startPercent ? -0.01 : 0.01;
	var data = JSON.stringify(instData);

	console.log(data);

	var arc = d3.arc()
	    .startAngle(0)
	    .innerRadius(radius)
	    .outerRadius(radius - border);

	var parent = d3.selectAll('div#progress-circle');

	var svg = parent.append('svg')
	    .attr('width', boxSize)
	    .attr('height', boxSize);

	var defs = svg.append('defs');

	var filter = defs.append('filter')
	    .attr('id', 'blur');

	filter.append('feGaussianBlur')
	    .attr('in', 'SourceGraphic')
	    .attr('stdDeviation', '7');

	var g = svg.append('g')
	    .attr('transform', 'translate(' + boxSize / 2 + ',' + boxSize / 2 + ')');

	var meter = g.append('g')
	    .attr('class', 'progress-meter');

	meter.append('path')
	    .attr('class', 'background')
	    .attr('fill', '#ccc')
	    .attr('fill-opacity', 0.5)
	    .attr('d', arc.endAngle(twoPi));

	var foreground = meter.append('path')
	    .attr('class', 'foreground')
	    .attr('fill', circleColor)
	    .attr('fill-opacity', 1)
	    .attr('stroke', circleColor)
	    .attr('stroke-width', 5)
	    .attr('stroke-opacity', 1)
	    .attr('filter', 'url(#blur)');

	var front = meter.append('path')
	    .attr('class', 'foreground')
	    .attr('fill', circleColor)
	    .attr('fill-opacity', 1);

	var numberText = meter.append('text')
	    .attr('fill', '#ccc')
	    .attr('text-anchor', 'middle')
	    .attr('dy', '.35em');

	function updateProgress(progress) {
	    foreground.attr('d', arc.endAngle(twoPi * progress));
	    front.attr('d', arc.endAngle(twoPi * progress));
	    numberText.text(formatPercent(progress));
	}
	function setProgressColor(){
		if(endPercent < 0.40)
			return 'red';
		else if(endPercent < 0.70)
			return 'orange';
		else
			return 'green';
	}
	var progress = startPercent;

	(function loops() {
	    updateProgress(progress);

	    if (count > 0) {
	        count--;
	        progress += step;
	        setTimeout(loops, 50);
	    }
	})();
</script>
